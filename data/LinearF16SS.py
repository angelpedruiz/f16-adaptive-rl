import numpy as np
# State Space Representation of the F-16 Low-Fidelity Longitudinal Model Linearised around trim conditions

#==========================================================
#   Linearised Model For Longtiudinal Control High Fidelity
#==========================================================
# 
#       Trim Values and Cost
#
# cost   = 7.1856e-06
# thrust = 2109.4129 lb
# elev   = -2.2441 deg
# ail    = -0.093578 deg
# rud    = 0.094469 deg
# alpha  = 4.5307 deg
# dLEF   = 6.2816 deg
# Vel.   = 500ft/s
# alt = 15000 ft
# q = 0
# ========================================================= 

# State Matrix
A = np.array([
    [0.0000e+00, 5.0000e+02, 0.0000e+00, -5.0000e+02, 0.0000e+00, 0.0000e+00, 0.0000e+00],
    [0.0000e+00, 0.0000e+00, 0.0000e+00,  0.0000e+00, 1.0000e+00, 0.0000e+00, 0.0000e+00],
    [1.0799e-04, -3.2170e+01, -1.3277e-02, -7.3259e+00, -1.1965e+00, 1.5652e-03, 7.3970e-02],
    [2.0764e-06, -7.3944e-13, -2.5529e-04, -6.3976e-01, 9.3781e-01, -2.4448e-07, -1.3567e-03],
    [2.8304e-20, 0.0000e+00, -3.4798e-18, -1.5679e+00, -8.7906e-01, 0.0000e+00, -1.1366e-01],
    [0.0000e+00, 0.0000e+00, 0.0000e+00,  0.0000e+00, 0.0000e+00, -1.0000e+00, 0.0000e+00],
    [0.0000e+00, 0.0000e+00, 0.0000e+00,  0.0000e+00, 0.0000e+00, 0.0000e+00, -2.0200e+01]
])

# Input Matrix
B = np.array([
    [0.0000e+00, 0.0000e+00],
    [0.0000e+00, 0.0000e+00],
    [0.0000e+00, 0.0000e+00],
    [0.0000e+00, 0.0000e+00],
    [0.0000e+00, 0.0000e+00],
    [1.0000e+00, 0.0000e+00],
    [0.0000e+00, 2.0200e+01]
])

# Output Matrix
C = np.array([
    [1.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00],
    [0.0000e+00, 5.7296e+01, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00],
    [0.0000e+00, 0.0000e+00, 1.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00],
    [0.0000e+00, 0.0000e+00, 0.0000e+00, 5.7296e+01, 0.0000e+00, 0.0000e+00, 0.0000e+00],
    [0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 5.7296e+01, 0.0000e+00, 0.0000e+00]
])

# Feedforward Matrix
D = np.zeros((5, 2))

# x = [Δh, Δθ, Δv, Δα, Δq, Δδ_t, Δδ_e]
# u = [Δδ_t, Δδ_e]
# units = [ft, rad, ft/s, rad, rad/s, rad, rad]
#trimmed_state = np.array([15000, ])