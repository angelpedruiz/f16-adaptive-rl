import numpy as np
# State Space Representation of the F-16 High-Fidelity Longitudinal Model Linearised around trim conditions

#==========================================================
#   Linearised Model For Longtiudinal Control High Fidelity
#==========================================================

# State Matrix (7 x 7)
A_long_hi = np.array([
    [0, 500.0000, -0.0000, -500.0000, 0, 0, 0],
    [0, 0, 0, 0, 1.0000, 0, 0],
    [0.0001, -32.1700, -0.0132, -2.6686, -1.1863, 0.0016, 0.0387],
    [0.0000, -0.0000, -0.0003, -0.6761, 0.9392, -0.0000, -0.0014],
    [0.0000, 0, -0.0000, -0.5757, -0.8741, 0, -0.1188],
    [0, 0, 0, 0, 0, -1.0000, 0],
    [0, 0, 0, 0, 0, 0, -20.2000]
])

# Input Matrix (7 x 2)
B_long_hi = np.array([
    [0, 0],
    [0, 0],
    [0, 0],
    [0, 0],
    [0, 0],
    [1.0000, 0],
    [0, 20.2000]
])

# Output Matrix
C = np.array([
    [1.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00],
    [0.0000e+00, 5.7296e+01, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00],
    [0.0000e+00, 0.0000e+00, 1.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00],
    [0.0000e+00, 0.0000e+00, 0.0000e+00, 5.7296e+01, 0.0000e+00, 0.0000e+00, 0.0000e+00],
    [0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 5.7296e+01, 0.0000e+00, 0.0000e+00]
])

# Feedforward Matrix
D = np.zeros((5, 2))

# x = [Δh, Δθ, Δv, Δα, Δq, Δδ_t, Δδ_e]
# u = [Δδ_t, Δδ_e]
# units = [ft, rad, ft/s, rad, rad/s, rad, rad]
#trimmed_state = np.array([15000, ])